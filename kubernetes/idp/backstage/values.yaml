# --- minimal test Backstage on EKS with LB, PostgreSQL, GitHub auth ---

global:
  # we'll overwrite this with the ELB hostname after install (helm upgrade)
  externalHost: "changeme.example.com"

# Use the official Backstage helm chart's knobs
backstage:
  replicaCount: 1

  # Environment-driven app-config (Backstage reads APP_CONFIG_* automatically)
  # refs: env-var config pattern & example usage via Helm. :contentReference[oaicite:0]{index=0}
  extraEnvVars:
    # --- base URLs & CORS (must match how users reach your LB) ---
    - name: APP_CONFIG_app_baseUrl
      value: "http://{{ .Values.global.externalHost }}"
    - name: APP_CONFIG_backend_baseUrl
      value: "http://{{ .Values.global.externalHost }}"
    - name: APP_CONFIG_backend_cors_origin
      value: "http://{{ .Values.global.externalHost }}"

    # --- disable guest by forcing GitHub sign-in page ---
    # (chart container uses config; this tells frontend to show the GitHub login)
    # ref: signInPage in config. :contentReference[oaicite:1]{index=1}
    - name: APP_CONFIG_signInPage
      value: "github"

    # --- GitHub auth provider (production env) ---
    # Create the secret "backstage-auth" with these keys (see steps below).
    # GitHub OAuth callback must be:
    #   http://<externalHost>/api/auth/github/handler/frame  :contentReference[oaicite:2]{index=2}
    - name: APP_CONFIG_auth_environment
      value: "production"
    - name: APP_CONFIG_auth_providers_github_production_clientId
      valueFrom:
        secretKeyRef:
          name: backstage-auth
          key: GITHUB_CLIENT_ID
    - name: APP_CONFIG_auth_providers_github_production_clientSecret
      valueFrom:
        secretKeyRef:
          name: backstage-auth
          key: GITHUB_CLIENT_SECRET

    # --- PostgreSQL (Bitnami subchart) connection for Backstage backend ---
    - name: APP_CONFIG_backend_database_client
      value: "pg"
    - name: APP_CONFIG_backend_database_connection_host
      value: "{{ .Release.Name }}-postgresql"
    - name: APP_CONFIG_backend_database_connection_port
      value: "5432"
    - name: APP_CONFIG_backend_database_connection_user
      value: "backstage"
    - name: APP_CONFIG_backend_database_connection_database
      value: "backstage"
    - name: APP_CONFIG_backend_database_connection_password
      valueFrom:
        secretKeyRef:
          name: backstage-postgres
          key: password

    # --- demo catalog: pull a public example entity from GitHub ---
    # (static location in config; uses URL processor) :contentReference[oaicite:3]{index=3}
    - name: APP_CONFIG_catalog_locations_0_type
      value: "url"
    - name: APP_CONFIG_catalog_locations_0_target
      value: "https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/components/artist-lookup-component.yaml"
    # allow backend to read github.com URLs (url reader) :contentReference[oaicite:4]{index=4}
    - name: APP_CONFIG_backend_reading_allow_0_host
      value: "github.com"

service:
  type: LoadBalancer
  port: 80
  targetPort: 7007
  annotations: {} # add AWS LB annotations here if you want NLB specifics

ingress:
  enabled: false  # keep it simple: just use the Service LoadBalancer

# Enable the bundled Bitnami PostgreSQL subchart (easiest for tests)
# (this chart exposes a 'postgresql' section you can turn on)
postgresql:
  enabled: true
  auth:
    username: backstage
    database: backstage
    existingSecret: backstage-postgres
    secretKeys:
      userPasswordKey: password
  primary:
    persistence:
      enabled: false   # ephemeral (fine for tests)
